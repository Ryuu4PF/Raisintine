name: chocolatine

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
        - name: Checkout GitHub repository
          uses: actions/checkout@master
        - name: Execute coding style check
          run: ./check.sh . /tmp
        - name: parsing for annontations
          run: |
            log_file="/tmp/coding-style-reports.log"
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d':' -f1)
              line_number=$(echo "$line" | cut -d':' -f2)
              title=$(echo "$line" | cut -d':' -f3)
              detail=$(echo "$line" | cut -d':' -f4)
              echo "::error title=$title coding style error,file=$file,line=$line_number::$detail"
            done < "$log_file"

        - name: errors count
          run: |
            errors_count=$(wc -l < /tmp/coding-style-reports.log)
            if [ "$errors_count" -gt 0 ]; then
              echo "Found $errors_count coding style errors."
              exit 1
            else
              echo "No coding style errors found."
            fi

  check_program_compilation:
    needs: check_coding_style
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Compile program
        run: make
        timeout-minutes: 2
      - name: Clean up
        run: make clean
      - name: binary
        run: |
          for executable in $EXECUTABLES; do
            if [[ ! -x "$file" ]]; then
              echo "Error: '$file' not executable or missing."
              exit 1
            fi
          done

  run_tests:
    needs: check_program_compilation
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker:latest
    steps:
      - uses: actions/checkout@master
      - name: Run tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    if: github.event_name == 'push'
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Mirror repository
        uses: actions/checkout@master
        with:
            fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ vars.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}
